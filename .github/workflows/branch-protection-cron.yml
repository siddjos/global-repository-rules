name: Org-wide Branch Protection

on:
  schedule:
    - cron: '0 * * * *'  # Run every hour
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-and-enable-protection:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Run branch protection script
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        GITHUB_ORG_NAME: ${{ secrets.GITHUB_ORG_NAME }}
      run: |
        cat << EOF > protect_branches.py
        import os
        import requests
        from datetime import datetime
        import base64

        GITHUB_API_URL = "https://api.github.com/graphql"
        GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]
        ORG_NAME = os.environ["GITHUB_ORG_NAME"]

        # GraphQL query to get repositories and their default branch protection status
        query = """
        query($org: String!, $cursor: String) {
          organization(login: $org) {
            repositories(first: 100, after: $cursor) {
              pageInfo {
                hasNextPage
                endCursor
              }
              nodes {
                name
                id
                defaultBranchRef {
                  name
                  branchProtectionRule {
                    id
                  }
                }
              }
            }
          }
        }
        """

        # GraphQL mutation to enable branch protection
        enable_protection_mutation = """
        mutation($repositoryId: ID!, $pattern: String!) {
          createBranchProtectionRule(input: {
            repositoryId: $repositoryId,
            pattern: $pattern,
            requiresApprovingReviews: true,
            requiredApprovingReviewCount: 1,
            dismissesStaleReviews: true,
            restrictsReviewDismissals: true,
            requiresStatusChecks: true,
            requiresStrictStatusChecks: true,
            requiresCodeOwnerReviews: true,
            isAdminEnforced: true
          }) {
            branchProtectionRule {
              id
            }
          }
        }
        """

        create_readme_mutation = """
        mutation($input: CreateCommitOnBranchInput!) {
          createCommitOnBranch(input: $input) {
            commit {
              id
            }
          }
        }
        """
        
        
        def run_query(query, variables):
            headers = {"Authorization": f"Bearer {GITHUB_TOKEN}"}
            response = requests.post(GITHUB_API_URL, json={"query": query, "variables": variables}, headers=headers)
            if response.status_code == 200:
                return response.json()
            else:
                raise Exception(f"Query failed with status code: {response.status_code}. {response.text}")
        
        def enable_branch_protection(repo_id, branch_name):
            variables = {
                "repositoryId": repo_id,
                "pattern": branch_name
            }
            result = run_query(enable_protection_mutation, variables)
            return result["data"]["createBranchProtectionRule"]["branchProtectionRule"]["id"]
        
        def create_readme(repo_name):
            readme_content = "# README\n\nThis is a readme to the repository."
            encoded_content = base64.b64encode(readme_content.encode()).decode()
        
            variables = {
              "input": {
                "branch": {
                  "repositoryNameWithOwner": f"{ORG_NAME}/{repo_name}",
                  "branchName": "main"
                },
                "message": {
                  "headline": "Create README.md"
                },
                "fileChanges": {
                  "additions": [
                    {
                      "path": "README.md",
                      "contents": encoded_content
                    }
                  ],
                  "deletions": []
                }
              }
            }
        
            result = run_query(create_readme_mutation, variables)
        
            print("ran the query to creatre readme")
        
        
        def main():
            print(f"Starting branch protection check at {datetime.now()}")
            
            has_next_page = True
            cursor = None
            
            while has_next_page:
                variables = {"org": ORG_NAME, "cursor": cursor}
                result = run_query(query, variables)
                
                repos = result["data"]["organization"]["repositories"]
                
                for repo in repos["nodes"]:
                    repo_name = repo["name"]
        
                    if repo["defaultBranchRef"]:
                        #print(f"No default branch found for {repo_name}")
                        #continue
                        default_branch = repo["defaultBranchRef"]["name"]
                        protection_rule = repo["defaultBranchRef"]["branchProtectionRule"]
                        
                        if not protection_rule:
                            print(f"Enabling branch protection for {repo_name} on branch {default_branch}")
                            enable_branch_protection(repo["id"], default_branch)
                        else:
                            print(f"Branch protection already enabled for {repo_name} on branch {default_branch}")
                    else:
                        # create readme.md file
                        print(f"No default branch found for {repo_name}")
                        #create_readme(repo["name"])
                        print(f"Creating README.md for {repo_name}")
                        #enable_branch_protection(repo["id"], "main")
                
                has_next_page = repos["pageInfo"]["hasNextPage"]
                cursor = repos["pageInfo"]["endCursor"]
            
            print(f"Finished branch protection check at {datetime.now()}")

        if __name__ == "__main__":
            main()
        EOF

        python protect_branches.py
