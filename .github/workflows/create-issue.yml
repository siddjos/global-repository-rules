name: Create Issue in Another Repo

on:
  repository_dispatch:
    types: [repo-created]
  workflow_dispatch:

jobs:
  create-issue:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Clone the remote repository
      uses: actions/checkout@v2
      with:
        repository: siddjos/notfy6
        token: ${{ secrets.PAT_GITHUB }}
        path: notfy6

    - name: Ensure README1.md exists in the remote repository
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        REPO_OWNER: ${{ github.event.client_payload.owner }}
        REPO_NAME: ${{ github.event.client_payload.repo }}
      run: |
        # Check if README exists
          README_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/contents/README.md)

          if [ "$README_CHECK" = "200" ]; then
            echo "README.md already exists. Skipping creation."
          else
            echo "README.md does not exist. Creating now."
            README_CONTENT="# Welcome to $REPO_NAME\n\nThis README was automatically generated."
            
            curl -X PUT \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/contents/README.md \
              -d '{
                "message": "Create README",
                "content": "'"$(echo -n "$README_CONTENT" | base64)"'",
                "branch": "main"
              }'
            
            if [ $? -eq 0 ]; then
              echo "README.md created successfully."
            else
              echo "Failed to create README.md."
              exit 1
            fi
          fi

    - name: Enable branch protection on the main branch
      #uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        REPO_OWNER: ${{ github.event.client_payload.owner }}
        REPO_NAME: ${{ github.event.client_payload.repo }}
      run: |
          # Get default branch name
          DEFAULT_BRANCH=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO_OWNER/$REPO_NAME \
            | jq -r .default_branch)

          echo "Enabling branch protection for $DEFAULT_BRANCH branch"

          curl -X PUT \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/branches/$DEFAULT_BRANCH/protection \
            -d '{
              "required_status_checks": null,
              "enforce_admins": true,
              "required_pull_request_reviews": {
                "dismissal_restrictions": {},
                "dismiss_stale_reviews": true,
                "require_code_owner_reviews": true,
                "required_approving_review_count": 1
              },
              "restrictions": null
            }'

          if [ $? -eq 0 ]; then
            echo "Branch protection enabled successfully."
          else
            echo "Failed to enable branch protection."
            exit 1
          fi
          
    - name: Create issue in another repository
      env:
        GH_TOKEN: ${{ secrets.PAT_GITHUB }}
        REPO_OWNER: ${{ github.event.client_payload.owner }}
        REPO_NAME: ${{ github.event.client_payload.repo }}
      run: |
        curl -X POST \
          -H "Authorization: token $GH_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues \
          -d '{"title":"New Issue created","body":"This is the body of the new issue created by GitHub Actions."}'
